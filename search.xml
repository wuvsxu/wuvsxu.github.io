<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysqlql计算一段时间内 表中每天的数据量]]></title>
    <url>%2F2018%2F08%2F27%2Fmysqlql%E8%AE%A1%E7%AE%97%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85-%E8%A1%A8%E4%B8%AD%E6%AF%8F%E5%A4%A9%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F%2F</url>
    <content type="text"><![CDATA[原sql为12345678910111213141516171819202122 SELECT CAST(tt.startTime AS char) x,count(tt.id) yFROM ( SELECT t.id id, date(t.start_time) startTime FROM sys_visit_log t WHERE t.prod_id IN ( SELECT xp.id FROM xypt_production xp WHERE xp.org_id = #&#123;orgId,jdbcType=VARCHAR&#125; ) ) ttwhere tt.startTime &amp;lt; date(NOW()) and tt.startTime &amp;gt;= date( DATE_SUB(NOW(), INTERVAL 7 DAY))GROUP BY startTimeORDER BY tt.startTime ASC 结果12342018-08-20 162018-08-22 212018-08-23 152018-08-24 6 修改后改为1234567891011121314151617181920212223242526272829303132333435363738SELECT CAST(a.x AS CHAR) x, count(tt.id) yFROM ( SELECT date( DATE_SUB(NOW(), INTERVAL 1 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 2 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 3 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 4 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 5 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 6 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 7 DAY) ) x ) aLEFT JOIN ( SELECT t.id id, date(t.start_time) startTime FROM sys_visit_log t WHERE t.prod_id IN ( SELECT xp.id FROM xypt_production xp WHERE xp.org_id = 'a4b1ccf70e4c47978e7931356ab43577' ) AND date(t.start_time) &lt; date(NOW()) AND date(t.start_time) &gt;= date( DATE_SUB(NOW(), INTERVAL 7 DAY) )) tt ON a.x = tt.startTimeGROUP BY a.xORDER BY a.x ASC 结果12345672018-08-20 162018-08-21 02018-08-22 212018-08-23 152018-08-24 62018-08-25 02018-08-26 0 参考地址https://stackoverflow.com/questions/16636433/mysql-count-to-return-0-if-no-records-found]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis坑点]]></title>
    <url>%2F2018%2F08%2F27%2Fmybatis%E5%9D%91%E7%82%B9%2F</url>
    <content type="text"><![CDATA[问题Mybatis出错：Error instantiating class xxx with invalid types () or values () 解决原因是JavaBean必须要有无参构造器 mybatis在创建bean映射的时候需要无参的构造其来构造对象，然后才进行赋值操作。 因此，Bean必须要有无参构造函数才能正确映射。]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[d3制作折线图]]></title>
    <url>%2F2018%2F08%2F27%2Fd3%E5%88%B6%E4%BD%9C%E6%8A%98%E7%BA%BF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116 &lt;style&gt; .container &#123; margin: 30px auto; width: 600px; height: 300px; border: 1px solid #000; &#125; .axis path, .axis line, .line &#123; stroke: #000; fill: none; &#125; &lt;/style&gt;&lt;div class="tablebox"&gt; &lt;div class="container"&gt; &lt;svg width="100%" height="100%"&gt;&lt;/svg&gt; &lt;/div&gt; &lt;script src="http://d3js.org/d3.v3.min.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script&gt; window.onload = function() &#123; var width = 600, height = 300; // SVG画布边缘与图表内容的距离 var padding = &#123; top: 50, right: 50, bottom: 70, left: 50 &#125;; // 创建一个分组用来组合要画的图表元素 var main = d3.select('.container svg').append('g') .classed('main', true) .attr('transform', "translate(" + padding.top + ',' + padding.left + ')'); // 模拟数据 var dataset = [ &#123;x: '2018-01-01', y: 11&#125;, &#123;x: '2018-01-02', y: 35&#125;, &#123;x: '2018-01-03', y: 23&#125;, &#123;x: '2018-01-04', y: 78&#125;, &#123;x: '2018-01-05', y: 55&#125;, &#123;x: '2018-01-06', y: 18&#125;, &#123;x: '2018-01-07', y: 98&#125;, &#123;x: '2018-01-08', y: 100&#125;, &#123;x: '2018-01-09', y: 22&#125;, &#123;x: '2018-01-10', y: 65&#125; ]; // 创建x轴的比例尺(线性比例尺) var format = d3.time.format("%Y-%m-%d"); /* var xScale = d3.scale.linear() .domain(d3.extent(dataset, function(d) &#123; return d.x; &#125;)) .range([0, width - padding.left - padding.right]);*/ var xScale = d3.time.scale() .domain([format.parse(dataset[0].x), format.parse(dataset[dataset.length-1].x)]) .range([0, width - padding.left - padding.right]); // 创建y轴的比例尺(线性比例尺) var yScale = d3.scale.linear() .domain([0, d3.max(dataset,function(d) &#123; return d.y; &#125;)]) .range([height - padding.top - padding.bottom, 0]); // 创建x轴 var xAxis = d3.svg.axis() .scale(xScale) .orient('bottom') .tickFormat(d3.time.format("%Y-%m-%d")); // 创建y轴 var yAxis = d3.svg.axis() .scale(yScale) .orient('left'); // 添加SVG元素并与x轴进行“绑定” main.append('g') .attr('class', 'x axis') .attr('transform', 'translate(0,' + (height - padding.top - padding.bottom) + ')') .call(xAxis) .selectAll("text") .attr("transform", "rotate(-70)") .style("text-anchor", "end"); ; // 添加SVG元素并与y轴进行“绑定” main.append('g') .attr('class', 'axis') .call(yAxis); // 添加折线 var line = d3.svg.line() .x(function(d) &#123; return xScale(format.parse(d.x)) &#125;) .y(function(d) &#123; return yScale(d.y); &#125;) // 选择线条的类型 .interpolate('linear'); // 添加path元素，并通过line()计算出值来赋值 main.append('path') .attr('class', 'line') .attr('d', line(dataset)); // 添加点 main.selectAll('circle') .data(dataset) .enter() .append('circle') .attr('cx', function(d) &#123; return xScale(format.parse(d.x)); &#125;) .attr('cy', function(d) &#123; return yScale(d.y); &#125;) .attr('r', 5) .attr('fill', function(d, i) &#123; return getColor(i); &#125;); &#125;; function getColor(idx) &#123; var palette = [ '#2ec7c9', '#b6a2de', '#5ab1ef', '#ffb980', '#d87a80', '#8d98b3', '#e5cf0d', '#97b552', '#95706d', '#dc69aa', '#07a2a4', '#9a7fd1', '#588dd5', '#f5994e', '#c05050', '#59678c', '#c9ab00', '#7eb00a', '#6f5553', '#c14089' ] return palette[idx % palette.length]; &#125; &lt;/script&gt;&lt;/div&gt; 结果点击查看 http://www.wziyou.top:19080/demo/d3_demo.html 参考内容d3制作折线图横坐标轴为日期日期转换问题刻度数]]></content>
      <tags>
        <tag>d3</tag>
        <tag>js</tag>
        <tag>折线图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea使用指南]]></title>
    <url>%2F2018%2F08%2F23%2Fidea%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[项目运行时 自动编译更新项目https://blog.csdn.net/wangyy130/article/details/70901589]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel转html在线工具]]></title>
    <url>%2F2018%2F08%2F23%2Fexcel%E8%BD%AChtml%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[链接地址：http://pressbin.com/tools/excel_to_html_table/index.html 解决方案123在makedowm中，设计表格可能会遇到需要合并两个表格的情况，但是makedown只能制作简单的表格，这时就需要直接写成html格式。在朋友的提示下，找到了一个可以把excel直接转换为html的工具。直接从excel中复制内容进来，点击 conver进行转换，然后进行修改。 缺陷1虽然这种方法可以解决问题，但是makedown原本目的是为了让文本简洁可读高效，违背了makedown的初衷，不建议用这种方式]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring 定时任务]]></title>
    <url>%2F2018%2F08%2F23%2Fspring-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[可基于注解，也可基于配置 1.在配置文件中配置定时任务spring配置文件中，添加命名空间1234在&lt;beans &gt;中添加xmlns:task="http://www.springframework.org/schema/task" http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd xml添加配置12345678910111213141516171819202122232425&lt;!-- 定时任务 （将类注入xml）--&gt;&lt;bean id="jobBean" class="com.bxj.common.task.ClearOrderTask" /&gt;&lt;bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&gt; &lt;property name="targetObject" ref="jobBean" /&gt; &lt;!--ClearOrderTask类中需要执行的方法--&gt; &lt;property name="targetMethod" value="doClearOrder" /&gt; &lt;!--将并发设置为false--&gt; &lt;property name="concurrent" value="false" /&gt;&lt;/bean&gt;&lt;bean id="clearOrderTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="jobDetail" /&gt; &lt;!--表达式，每天晚上23点55分开始 执行一次 （可以自定义，谷歌关键词 cron表达式） --&gt; &lt;property name="cronExpression" value="0 55 23 * * ?" /&gt;&lt;/bean&gt;&lt;!--总管理类如果将lazy-init='false'那么容器启动就会执行调度程序 --&gt;&lt;bean id="orderQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false" &gt; &lt;property name="triggers"&gt; &lt;list&gt; &lt;!--作业调度器,list下可加入其他的调度器 --&gt; &lt;ref bean="clearOrderTrigger" /&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; 执行方法12345678910111213141516171819202122 public class ClearOrderTask &#123; /** * 调度任务开关 */ @Value("$&#123;CLEAR_ORDER_TASK_SWITCH&#125;") private String CLEAR_ORDER_TASK_SWITCH; @Autowired private OrderInfoService orderInfoService; @Autowired private OrderDetailService orderDetailService; @Transactional public void doClearOrder() throws Exception&#123; //检查配置文件任务开关 if( Const.TASK_SWITCH_ON.equals( CLEAR_ORDER_TASK_SWITCH ))&#123; //清除订单 //先删除订单明细 orderDetailService.deleteOrderDetailByTask(); //再删除订单 orderInfoService.deleteOrderInfoByTask();; &#125; &#125; &#125; 2.注解配置定时任务123456789101112131415161718@Componentpublic class MyTask2 &#123; /** * 定时计算。每天凌晨 01:00 执行一次 */ @Scheduled(cron = "0 0 1 * * *") public void show() &#123; System.out.println("show method 2"); &#125; /** * 启动时执行一次，之后每隔2秒执行一次 */ @Scheduled(fixedRate = 1000*2) public void print() &#123; System.out.println("print method 2"); &#125;&#125; 定时任务和cron表达式相关链接参考链接在线cron表达式生成器cron表达式详解]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[chrome 上传下载时卡死问题]]></title>
    <url>%2F2018%2F08%2F23%2Fchrome-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%97%B6%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[原因和解决办法1搜狗输入法与chrome冲突，搜狗卸载重新安装就好了。 近期遇到这种问题，将chrome重新安装了好多次都没用。装成低版本的chrome时就好了，但是因为版本太低，好多插件不起效，用起来还是蛋疼。然后在网上找原因时，看到有说可能与搜狗有关系，卸载搜狗后，chrome恢复正常， 重新安装成新版本的搜狗后，问题解决 参考地址:http://tieba.baidu.com/p/5782771456]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 日期操作函数 DATE_ADD() DATE_SUB() Function]]></title>
    <url>%2F2018%2F08%2F22%2Fmysql-%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[DATE_ADD()：日期增加函数DATE_SUB()：日期减少函数 例添加15分钟到日期并返回日期：1SELECT DATE_ADD("2018-08-22 09:34:21", INTERVAL 15 MINUTE); 从日期减去10天并返回日期：1SELECT DATE_SUB("2018-08-22", INTERVAL 10 DAY); 定义和用法123456_定义：_DATE_ADD（）函数在添加特定时间/日期间隔后返回日期。DATE_SUB（）函数在减去某个时间/日期间隔后返回一个日期。__用法：__DATE_ADD(date, INTERVAL value unit)DATE_SUB(date, INTERVAL value unit) 参数值 参数 说明 date 必填，原日期 value 必填，增加/减去日期的值 unit 必填，单位类型 unit值 参数 说明 MICROSECOND 微秒 SECOND 秒 MINUTE 分钟 HOUR 小时 DAY 天 WEEK 周 MONTH 月 QUARTER 季度 YEAR 年 SECOND_MICROSECOND 秒.微秒 MINUTE_MICROSECOND 分钟.微秒 MINUTE_SECOND 分钟.秒 HOUR_MICROSECOND 小时.微秒 HOUR_SECOND 小时.秒 HOUR_MINUTE 小时.分 DAY_MICROSECOND 天.微秒 DAY_SECOND 天.秒 DAY_MINUTE 天.分 DAY_HOUR 天.时 YEAR_MONTH 年.月 参考地址参考地址1: https://www.w3schools.com/sql/func_mysql_date_add.asp参考地址2: https://www.w3schools.com/sql/func_mysql_date_sub.asp]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[订单支付遇到的问题]]></title>
    <url>%2F2018%2F08%2F22%2F%E6%94%AF%E4%BB%98%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述前提：是这样的，一笔订单下单之后，如果不支付，会处于待支付状态。而一般这个订单会有类似 30 分钟不支付自动取消订单的功能。 实现：这种功能的实现，可以通过定时任务，每隔 30 秒或一分钟扫描一次。但如果集群环境下，可能定时任务会执行重复。当然我们可以通过类似操作系统 PV 操作限制同一时段只能一个定时任务执行。 目标：这种情况，除了定时任务，还有没有其他好点的实现？ 解决办法1.记录下单时间 。在用户访问订单的时候用超时时间和下单时间比较，如果超时就取消订单，用户主动触发。在加上定时任务，扫描表，过期订单改为取消状态。优点：方法简单高效缺点：用户自己触发的这种并不能即使恢复库存.2.利用redis。将订单存入redis中，给订单设置过期时间（expire ）。支付时，去redis查询订单，不存在的话讲订单设置为已取消。 3.延时队列。 可以 rabbitmq 实现的。AB 两个队列，A 队列设置消息过期时间，A 队列没有消费者，A 队列过期后自动转发到 B 队列，B 队列消费者进行取消队列。（此处是别人给的方案，对消息队列熟悉，等有时间研究）]]></content>
      <categories>
        <category>业务</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建]]></title>
    <url>%2F2018%2F08%2F22%2Fwz%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[这是一篇测试文章,感谢: hexo搭建：https://zhuanlan.zhihu.com/p/25729240 tags和categories用法：https://github.com/hexojs/hexo/issues/320 增加搜索功能：http://www.itfanr.cc/2017/10/27/add-search-function-to-hexo-blog/]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
