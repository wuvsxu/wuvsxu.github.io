<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pagehelper 插件注意事项]]></title>
    <url>%2F2018%2F08%2F31%2Fpagehelper%E6%8F%92%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[问题 在用 pagehelper插件 时，遇到了分页数量查询出错的问题。 pagehelper和mybatis的关联结果查询冲突，在GitHub上的重要提示中有写。 解决 后续中找到了一种解决方案。 https://blog.csdn.net/u013887008/article/details/80382764 注:数据量过多时，不推荐使用，还是用一般的分页方式。]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 触发器]]></title>
    <url>%2F2018%2F08%2F29%2Fmysql-%E8%A7%A6%E5%8F%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[在ＭySQL中，触发器可以在你执行INSERT、UPDATE或DELETE的时候，执行一些特定的操作。在创建触发器时，可以指定是在执行SQL语句之前或是之后执行这些操作。通过触发器，你可以实现一些业务逻辑或一些数据限制，在简化应用程序逻辑，优化系统性能时非常有用。但在使用MySQL触发器也有一些注意事项，否则会导致触发器不能工作或不按指定的方式工作。 1. MySQL触发器注意事项MySQL触发器使用非常简单，当然其功能也比较有限。当你在项目中大量使用触发器，那么你应该注意以下几点，以避免触发器不按预期效果执行： MySQL触发器能基于行触发，MySQL触发器始终时基于表中的一条记录触发，而不是一组SQL语句。因此，如果需要变动整个数据集而数据集数据量又较大时，触发器效果会非常低。每一个表的一个事件只能定义一个触发器，例如：不能在AFTER INSERT上定义一个以上的触发器。 2. MySQL触发器可能导致的问题由于MySQL触发器基于行触发的特性，因此对于批量操作并不适合使用触发器，如：汇总表、缓存表等。触发器使用不当，可能会导致以下问题： 一个MySQL触发器可能会关联到另外一张表或几张表的操作。因此，会导致数据库服务器负荷也会相应的增加一倍或几倍，如果出现因为触发器问题导致的性能问题，会很难定位问题位置和原因。在基于锁的操作中，触发器可能会导致锁等待或死锁。触发器执行失败，原来执行的SQL语名也会执行失败。而因为触发器导致的失败结果和失败原因，往往很难排查。 3. MySQL触发器的好处对MySQL触发器有足够的认识和了解后，MySQL触发器会给我们带来极大的便利。当实现一些系统约束时，或在实现系统维护及针对操作数据的更新时，使用触发器都非常方便。在之胶我们介绍了MySQL触发器不适合做的一些工作，但MySQL触发器在以下一些应用场景中，会非常实用： 基于行数据变更的日志记录。如：在用户订单系统中，我们可以基于用户订单数据状态的改变，使用触发器构建用户订单日志表数据。 基于行数据变更的关系数据的更新。如：用户订单改变至付款或相关状态时，我们可以基于用户订单数据状态的改变，使用触发器改变用户会付款或相应状态信息。 基于行数据变更的数据汇总。如：用户订单成交或失败，我们可以基于用户订单数据状态的改变，使用触发器构建用户总成交量或失败量汇总数据。 以上仅列举了一些常用场景，合理的利用MySQL触发器会在数据库工作效率和开发效率上有很大的提高。 由于MySQL触发器的种种问题，要求我们在创建触发器就应该充分考虑。避免使用不合适的触发器，并能对所有触发器有足够的了解，以便问题的定位和排查。 特性 有begin end体，begin end;之间的语句可以写的简单或者复杂 什么条件会触发：I、D、U 什么时候触发：在增删改前或者后 触发频率：针对每一行执行 触发器定义在表上，附着在表上 注意 尽量少使用触发器，不建议使用。 假设触发器触发每次执行1s，insert table 500条数据，那么就需要触发500次触发器，光是触发器执行的时间就花费了500s，而insert 500条数据一共是1s，那么这个insert的效率就非常低了。因此我们特别需要注意的一点是触发器的begin end;之间的语句的执行效率一定要高，资源消耗要小。 触发器尽量少的使用，因为不管如何，它还是很消耗资源，如果使用的话要谨慎的使用，确定它是非常高效的：触发器是针对每一行的；对增删改非常频繁的表上切记不要使用触发器，因为它会非常消耗资源。 语法 1、创建只有一个执行语句的触发器1CREATE TRIGGER 触发器名 BEFORE|AFTER 触发事件 ON 表名 FOR EACH ROW 执行语句; 2、创建有多个执行语句的触发器12345CREATE TRIGGER 触发器名 BEFORE|AFTER 触发事件ON 表名 FOR EACH ROWBEGIN 执行语句列表END; 例123456CREATE TRIGGER trig2 BEFORE DELETE ON work FOR EACH ROW BEGIN INSERT INTO time VALUES(NOW()); INSERT INTO time VALUES(NOW()); END 3、NEW与OLD详解MySQL 中定义了 NEW 和 OLD，用来表示触发器的所在表中，触发了触发器的那一行数据，来引用触发器中发生变化的记录内容，具体地： 在INSERT型触发器中，NEW用来表示将要（BEFORE）或已经（AFTER）插入的新数据； 在UPDATE型触发器中，OLD用来表示将要或已经被修改的原数据，NEW用来表示将要或已经修改为的新数据； 在DELETE型触发器中，OLD用来表示将要或已经被删除的原数据； 另外，OLD是只读的，而NEW则可以在触发器中使用 SET 赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。 4、查看触发器1234SHOW TRIGGERS;显示所有触发器的基本信息；无法查询指定的触发器。SELECT * FROM information_schema.triggers;显示所有触发器的详细信息；同时，该方法可以查询制定触发器的详细信息。 如果加where，可以写成12select * from information_schema.triggers where trigger_name='tri_insert_order'; 所有触发器信息都存储在information_schema数据库下的triggers表中，可以使用SELECT语句查询，如果触发器信息过多，最好通过TRIGGER_NAME字段指定查询。 5、删除触发器1DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name 删除触发器之后最好使用上面的方法查看一遍；同时，也可以使用database.trig来指定某个数据库中的触发器。 示例在做支付宝订单支付的时，支付宝支付接口在一个单独的项目中，在后台调取接口生成订单去支付，当完成支付时，因为回调方法在另一个项目中，没法修改，只能用触发器来实现对表数据的监控，来完成剩下的业务逻辑。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142BEGIN DECLARE done INT DEFAULT FALSE ; /*遍历数据结束标志 */ declare lenght_time int(5); /*时长*/ declare column_id varchar(32); /*栏目id*/ /*定义游标 以及赋值*/ declare column_ids cursor for select sod.service_id,sod.duration from sys_order_detail sod where order_id in (SELECT t.order_id FROM sys_order_info t WHERE order_number = NEW.out_trade_no); DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE ;/* 将结束标志绑定到游标 */ IF (NEW.trade_status = 'TRADE_SUCCESS') THEN UPDATE sys_order_info set order_status = '2' where order_number = NEW.out_trade_no; /*打开游标*/ open column_ids ; /*循环开始*/ read_loop:loop /*提前游标的值 */ fetch column_ids into column_id ,lenght_time; /*声明结束的时候*/ if done then leave read_loop ; end if ; /*根据时长和栏目id修改时长*/ UPDATE xypt_column SET end_time = DATE_ADD(end_time, INTERVAL lenght_time MONTH) where id =column_id ; end loop ; /*循环结束*/ close column_ids ;/*关闭游标*/ ELSE UPDATE sys_order_info set order_status = '3' where order_number = NEW.out_trade_no; END IF;END 参考地址点击查看触发器概念 https://itbilu.com/database/mysql/4y77zMXel.html点击查看触发器应用 https://www.cnblogs.com/geaozhang/p/6819648.html点击查看官网示例 https://dev.mysql.com/doc/refman/5.5/en/trigger-syntax.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java List接口]]></title>
    <url>%2F2018%2F08%2F29%2Fjava-List%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[介绍Interface List 继承自Collection, Iterable，实现类有AbstractList, AbstractSequentialList, ArrayList, AttributeList, CopyOnWriteArrayList, LinkedList, RoleList, RoleUnresolvedList, Stack, Vector，最常用的实现类是ArrayList。 常用方法概要接口方法 （有描述的为常用方法） 修饰符和返回类型 方法 描述 boolean add(E e) 将指定的元素追加到此列表的末尾（可选操作）。 void add(int index, E element) 将指定的元素插入此列表中的指定位置（可选操作）。 boolean addAll(Collection&lt;? extends E&gt; c) boolean addAll(int index, Collection&lt;? extends E&gt; c) void clear() 从此列表中删除所有元素（可选操作）。 boolean contains(Object o) 如果此列表包含指定的元素，则返回 true 。 boolean containsAll(Collection&lt;?&gt; c) boolean equals(Object o) E get(int index) 返回此列表中指定位置的元素。 int hashCode() 返回此列表的哈希码值。 int indexOf(Object o) 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1 boolean isEmpty() Iterator iterator() int lastIndexOf(Object o) ListIterator listIterator() ListIterator listIterator(int index) E remove(int index) 删除该列表中指定位置的元素（可选操作）。 boolean remove(Object o) 从列表中删除指定元素的第一个出现（如果存在）（可选操作）。 boolean removeAll(Collection&lt;?&gt; c) default void replaceAll(UnaryOperator operator) boolean retainAll(Collection&lt;?&gt; c) E set(int index, E element) 用指定的元素（可选操作）替换此列表中指定位置的元素。 int size() default void sort(Comparator&lt;? super E&gt; c) default Spliterator spliterator() List subList(int fromIndex, int toIndex) Object[] toArray() 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 T[] toArray(T[] a) 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型 list去重方法12345678910111213141516171819202122232425List&lt;String&gt; lst1=new ArrayList&lt;&gt;();lst1.add("aa");lst1.add("dd");lst1.add("ss");lst1.add("aa");lst1.add("ss");//-----------------------------------//方法 1.for (int i = 0; i &lt;lst1.size()-1; i++) &#123; for (int j = lst1.size()-1; j &gt;i; j--) &#123; if (lst1.get(j).equals(lst1.get(i))) &#123; lst1.remove(j); &#125; &#125;&#125;System.out.println(lst1);//-----------------------------------//方法 2.List&lt;String&gt; lst2=new ArrayList&lt;&gt;();for (String s:lst1) &#123; if (Collections.frequency(lst2, s)&lt;1) &#123; lst2.add(s); &#125;&#125;System.out.println(lst2); 参考地址java 官方文档 https://docs.oracle.com/javase/8/docs/api/java/util/List.html中文文档下载]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECharts 地图统计数据]]></title>
    <url>%2F2018%2F08%2F29%2FECharts-%E5%9C%B0%E5%9B%BE%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt; &lt;div&gt; &lt;div id="main" style="height:400px;width:800px;margin: auto;"&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- ECharts单文件引入 --&gt; &lt;script src="http://echarts.baidu.com/build/dist/echarts.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; // 路径配置 require.config(&#123; paths: &#123; echarts: 'http://echarts.baidu.com/build/dist' &#125; &#125;); // 使用 require(['echarts', 'echarts/chart/line', 'echarts/chart/bar', // 使用柱状图就加载bar模块，按需加载 'echarts/chart/map', ], function(ec) &#123; // 基于准备好的dom，初始化echarts图表 var myChart = ec.init(document.getElementById('main')); var option = &#123; title: &#123; text: '访问来访分析', x:"center" /*subtext: '数据来自国家统计局' */ &#125;, tooltip: &#123; trigger: 'item' &#125;, dataRange: &#123; orient: 'horizontal', min: 0, max: 55000, text: ['高', '低'], // 文本，默认为数值文本 splitNumber: 0, x: "20%" &#125;, toolbox: &#123; show: false, orient: 'vertical', x: 'right', y: 'center', feature: &#123; mark: &#123; show: true &#125;, dataView: &#123; show: true, readOnly: false &#125; &#125; &#125;, series: [&#123; name: '累积访问次数', type: 'map', mapType: 'china', mapLocation: &#123; x: 'center' &#125;, itemStyle: &#123; normal: &#123; label: &#123; show: true &#125; &#125;, emphasis: &#123; label: &#123; show: true &#125; &#125; &#125;, data: [ &#123;name:'北京', value:16251.93&#125;, &#123;name:'福建', value:17560.18&#125;, &#123;name:'上海', value:19195.69&#125;, &#123;name:'湖北', value:19632.26&#125;, &#123;name:'湖南', value:19669.56&#125;, &#123;name:'四川', value:21026.68&#125;, &#123;name:'辽宁', value:22226.7&#125;, &#123;name:'河北', value:24515.76&#125;, &#123;name:'河南', value:26931.03&#125;, &#123;name:'浙江', value:32318.85&#125;, &#123;name:'山东', value:45361.85&#125;, &#123;name:'江苏', value:49110.27&#125;, &#123;name:'广东', value:53210.28&#125;] &#125;], animation: false &#125;; // 为echarts对象加载数据 myChart.setOption(option); &#125;); &lt;/script&gt; 效果点击查看 ECharts_demo2.html 参考地址参考地址:http://echarts.baidu.com/echarts2/doc/example/mix3.html]]></content>
      <categories>
        <category>前端</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECharts 制作折线图/统计图]]></title>
    <url>%2F2018%2F08%2F28%2FECharts-%E5%88%B6%E4%BD%9C%E6%8A%98%E7%BA%BF%E5%9B%BE-%E6%9F%B1%E7%8A%B6%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[官方api官网 http://echarts.baidu.com/examples/官方api http://echarts.baidu.com/api.html#echarts配置项详细介绍 http://echarts.baidu.com/option.html#title 介绍ECharts2.0提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于 BI 的漏斗图，仪表盘，并且支持图与图之间的混搭。ECharts 3 开始加强了对多维数据的支持。 直接贴代码以下部分配置项注释已加，还需要配置其他请查看配置项详细介绍 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;!DOCTYPE html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;ECharts&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;&lt;div&gt; &lt;div id="main" style="height:400px;width:800px;margin: auto;"&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- ECharts单文件引入 --&gt;&lt;script src="http://echarts.baidu.com/build/dist/echarts.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;// 路径配置require.config(&#123; paths: &#123; echarts: 'http://echarts.baidu.com/build/dist' &#125;&#125;);// 使用require( [ 'echarts', 'echarts/chart/line' , 'echarts/chart/bar', // 使用柱状图就加载bar模块，按需加载 ],function (ec) &#123; // 基于准备好的dom，初始化echarts图表 var myChart = ec.init(document.getElementById('main')); var option = &#123; title : &#123;//标题 text: '一周内流量统计变化', x:'center', //此处使用 left:"center",textAlign:"center"均不可用， //换成x后才好使，下面的同理 &#125;, tooltip: &#123; //提示框 show: true, trigger: 'axis' //坐标轴触发 &#125;, toolbox: &#123; //工具箱 show: true, //是否展示按钮 x:'left', feature: &#123; magicType: &#123; //模式切换（折线图，柱状图） type: ['line', 'bar', ], show: true &#125;, dataZoom: &#123; //区域放大 show: true &#125;, dataView: &#123; //数据视图 show: true &#125;, restore: &#123; //还原按钮 show: true &#125;, saveAsImage: &#123; //保存图片按钮 show: true &#125; &#125; &#125;, legend: &#123; //名称 data:['统计',"累计"], y:'8%', &#125;, xAxis : [ //x轴数据 &#123; type : 'category', //分类 boundaryGap : true, //数据边界线 data : ['2018-08-21','2018-08-22', '2018-08-23','2018-08-24', '2018-08-25','2018-08-26', '2018-08-27'] &#125; ], yAxis : [ //y轴数据 &#123; type : 'value' &#125; ], series : [ &#123; "name":"统计", "type":"line", "data":[5, 20, 40, 10, 10, 20,55] &#125;, &#123; "name":"累计", "type":"line", "data": [0,21,15,6,0,0,3] &#125; ] &#125;; // 为echarts对象加载数据 myChart.setOption(option); &#125;);&lt;/script&gt;&lt;/body&gt; 效果点击查看效果 ECharts_demo.html 参考地址参考地址:http://echarts.baidu.com/echarts2/doc/example/line2.html]]></content>
      <categories>
        <category>前端</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysqlql计算一段时间内 表中每天的数据量]]></title>
    <url>%2F2018%2F08%2F27%2Fmysqlql%E8%AE%A1%E7%AE%97%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85-%E8%A1%A8%E4%B8%AD%E6%AF%8F%E5%A4%A9%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F%2F</url>
    <content type="text"><![CDATA[原sql为12345678910111213141516171819202122 SELECT CAST(tt.startTime AS char) x,count(tt.id) yFROM ( SELECT t.id id, date(t.start_time) startTime FROM sys_visit_log t WHERE t.prod_id IN ( SELECT xp.id FROM xypt_production xp WHERE xp.org_id = #&#123;orgId,jdbcType=VARCHAR&#125; ) ) ttwhere tt.startTime &amp;lt; date(NOW()) and tt.startTime &amp;gt;= date( DATE_SUB(NOW(), INTERVAL 7 DAY))GROUP BY startTimeORDER BY tt.startTime ASC 结果12342018-08-20 162018-08-22 212018-08-23 152018-08-24 6 修改后改为1234567891011121314151617181920212223242526272829303132333435363738SELECT CAST(a.x AS CHAR) x, count(tt.id) yFROM ( SELECT date( DATE_SUB(NOW(), INTERVAL 1 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 2 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 3 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 4 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 5 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 6 DAY) ) x UNION ALL SELECT date( DATE_SUB(NOW(), INTERVAL 7 DAY) ) x ) aLEFT JOIN ( SELECT t.id id, date(t.start_time) startTime FROM sys_visit_log t WHERE t.prod_id IN ( SELECT xp.id FROM xypt_production xp WHERE xp.org_id = 'a4b1ccf70e4c47978e7931356ab43577' ) AND date(t.start_time) &lt; date(NOW()) AND date(t.start_time) &gt;= date( DATE_SUB(NOW(), INTERVAL 7 DAY) )) tt ON a.x = tt.startTimeGROUP BY a.xORDER BY a.x ASC 结果12345672018-08-20 162018-08-21 02018-08-22 212018-08-23 152018-08-24 62018-08-25 02018-08-26 0 参考地址https://stackoverflow.com/questions/16636433/mysql-count-to-return-0-if-no-records-found]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis坑点]]></title>
    <url>%2F2018%2F08%2F27%2Fmybatis%E5%9D%91%E7%82%B9%2F</url>
    <content type="text"><![CDATA[问题Mybatis出错：Error instantiating class xxx with invalid types () or values () 解决原因是JavaBean必须要有无参构造器 mybatis在创建bean映射的时候需要无参的构造其来构造对象，然后才进行赋值操作。 因此，Bean必须要有无参构造函数才能正确映射。]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[d3制作折线图]]></title>
    <url>%2F2018%2F08%2F27%2Fd3%E5%88%B6%E4%BD%9C%E6%8A%98%E7%BA%BF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116 &lt;style&gt; .container &#123; margin: 30px auto; width: 600px; height: 300px; border: 1px solid #000; &#125; .axis path, .axis line, .line &#123; stroke: #000; fill: none; &#125; &lt;/style&gt;&lt;div class="tablebox"&gt; &lt;div class="container"&gt; &lt;svg width="100%" height="100%"&gt;&lt;/svg&gt; &lt;/div&gt; &lt;script src="http://d3js.org/d3.v3.min.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script&gt; window.onload = function() &#123; var width = 600, height = 300; // SVG画布边缘与图表内容的距离 var padding = &#123; top: 50, right: 50, bottom: 70, left: 50 &#125;; // 创建一个分组用来组合要画的图表元素 var main = d3.select('.container svg').append('g') .classed('main', true) .attr('transform', "translate(" + padding.top + ',' + padding.left + ')'); // 模拟数据 var dataset = [ &#123;x: '2018-01-01', y: 11&#125;, &#123;x: '2018-01-02', y: 35&#125;, &#123;x: '2018-01-03', y: 23&#125;, &#123;x: '2018-01-04', y: 78&#125;, &#123;x: '2018-01-05', y: 55&#125;, &#123;x: '2018-01-06', y: 18&#125;, &#123;x: '2018-01-07', y: 98&#125;, &#123;x: '2018-01-08', y: 100&#125;, &#123;x: '2018-01-09', y: 22&#125;, &#123;x: '2018-01-10', y: 65&#125; ]; // 创建x轴的比例尺(线性比例尺) var format = d3.time.format("%Y-%m-%d"); /* var xScale = d3.scale.linear() .domain(d3.extent(dataset, function(d) &#123; return d.x; &#125;)) .range([0, width - padding.left - padding.right]);*/ var xScale = d3.time.scale() .domain([format.parse(dataset[0].x), format.parse(dataset[dataset.length-1].x)]) .range([0, width - padding.left - padding.right]); // 创建y轴的比例尺(线性比例尺) var yScale = d3.scale.linear() .domain([0, d3.max(dataset,function(d) &#123; return d.y; &#125;)]) .range([height - padding.top - padding.bottom, 0]); // 创建x轴 var xAxis = d3.svg.axis() .scale(xScale) .orient('bottom') .tickFormat(d3.time.format("%Y-%m-%d")); // 创建y轴 var yAxis = d3.svg.axis() .scale(yScale) .orient('left'); // 添加SVG元素并与x轴进行“绑定” main.append('g') .attr('class', 'x axis') .attr('transform', 'translate(0,' + (height - padding.top - padding.bottom) + ')') .call(xAxis) .selectAll("text") .attr("transform", "rotate(-70)") .style("text-anchor", "end"); ; // 添加SVG元素并与y轴进行“绑定” main.append('g') .attr('class', 'axis') .call(yAxis); // 添加折线 var line = d3.svg.line() .x(function(d) &#123; return xScale(format.parse(d.x)) &#125;) .y(function(d) &#123; return yScale(d.y); &#125;) // 选择线条的类型 .interpolate('linear'); // 添加path元素，并通过line()计算出值来赋值 main.append('path') .attr('class', 'line') .attr('d', line(dataset)); // 添加点 main.selectAll('circle') .data(dataset) .enter() .append('circle') .attr('cx', function(d) &#123; return xScale(format.parse(d.x)); &#125;) .attr('cy', function(d) &#123; return yScale(d.y); &#125;) .attr('r', 5) .attr('fill', function(d, i) &#123; return getColor(i); &#125;); &#125;; function getColor(idx) &#123; var palette = [ '#2ec7c9', '#b6a2de', '#5ab1ef', '#ffb980', '#d87a80', '#8d98b3', '#e5cf0d', '#97b552', '#95706d', '#dc69aa', '#07a2a4', '#9a7fd1', '#588dd5', '#f5994e', '#c05050', '#59678c', '#c9ab00', '#7eb00a', '#6f5553', '#c14089' ] return palette[idx % palette.length]; &#125; &lt;/script&gt;&lt;/div&gt; 结果点击查看 d3_demo.html 另外一个随机多折线demo d3_demo2.html 使用ECharts.js 制作折线图请点击访问ECharts.js 制作折线图 参考地址d3制作折线图横坐标轴为日期日期转换问题刻度数多折线]]></content>
      <categories>
        <category>前端</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>d3</tag>
        <tag>js</tag>
        <tag>折线图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea使用指南]]></title>
    <url>%2F2018%2F08%2F23%2Fidea%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[项目运行时 自动编译更新项目https://blog.csdn.net/wangyy130/article/details/70901589 idea激活idea activate license server地址：https://blog.csdn.net/u013218587/article/details/80590878 1234567891011121314151617http://idea.toocruel.nethttp://idea.youbbs.orghttp://idea.congm.inhttp://im.js.cn:8888http://intellij.mandroid.cn/http://idea.imsxm.com/http://idea.iteblog.com/key.phphttp://xdouble.cn:8888/http://hb5.s.osidea.cc:1017]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel转html在线工具]]></title>
    <url>%2F2018%2F08%2F23%2Fexcel%E8%BD%AChtml%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[链接地址：http://pressbin.com/tools/excel_to_html_table/index.html 解决方案123在makedowm中，设计表格可能会遇到需要合并两个表格的情况，但是makedown只能制作简单的表格，这时就需要直接写成html格式。在朋友的提示下，找到了一个可以把excel直接转换为html的工具。直接从excel中复制内容进来，点击 conver进行转换，然后进行修改。 缺陷1虽然这种方法可以解决问题，但是makedown原本目的是为了让文本简洁可读高效，违背了makedown的初衷，不建议用这种方式]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring 定时任务]]></title>
    <url>%2F2018%2F08%2F23%2Fspring-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[可基于注解，也可基于配置 1.在配置文件中配置定时任务spring配置文件中，添加命名空间1234在&lt;beans &gt;中添加xmlns:task="http://www.springframework.org/schema/task" http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd xml添加配置12345678910111213141516171819202122232425&lt;!-- 定时任务 （将类注入xml）--&gt;&lt;bean id="jobBean" class="com.bxj.common.task.ClearOrderTask" /&gt;&lt;bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&gt; &lt;property name="targetObject" ref="jobBean" /&gt; &lt;!--ClearOrderTask类中需要执行的方法--&gt; &lt;property name="targetMethod" value="doClearOrder" /&gt; &lt;!--将并发设置为false--&gt; &lt;property name="concurrent" value="false" /&gt;&lt;/bean&gt;&lt;bean id="clearOrderTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="jobDetail" /&gt; &lt;!--表达式，每天晚上23点55分开始 执行一次 （可以自定义，谷歌关键词 cron表达式） --&gt; &lt;property name="cronExpression" value="0 55 23 * * ?" /&gt;&lt;/bean&gt;&lt;!--总管理类如果将lazy-init='false'那么容器启动就会执行调度程序 --&gt;&lt;bean id="orderQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false" &gt; &lt;property name="triggers"&gt; &lt;list&gt; &lt;!--作业调度器,list下可加入其他的调度器 --&gt; &lt;ref bean="clearOrderTrigger" /&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt; 执行方法12345678910111213141516171819202122 public class ClearOrderTask &#123; /** * 调度任务开关 */ @Value("$&#123;CLEAR_ORDER_TASK_SWITCH&#125;") private String CLEAR_ORDER_TASK_SWITCH; @Autowired private OrderInfoService orderInfoService; @Autowired private OrderDetailService orderDetailService; @Transactional public void doClearOrder() throws Exception&#123; //检查配置文件任务开关 if( Const.TASK_SWITCH_ON.equals( CLEAR_ORDER_TASK_SWITCH ))&#123; //清除订单 //先删除订单明细 orderDetailService.deleteOrderDetailByTask(); //再删除订单 orderInfoService.deleteOrderInfoByTask();; &#125; &#125; &#125; 2.注解配置定时任务123456789101112131415161718@Componentpublic class MyTask2 &#123; /** * 定时计算。每天凌晨 01:00 执行一次 */ @Scheduled(cron = "0 0 1 * * *") public void show() &#123; System.out.println("show method 2"); &#125; /** * 启动时执行一次，之后每隔2秒执行一次 */ @Scheduled(fixedRate = 1000*2) public void print() &#123; System.out.println("print method 2"); &#125;&#125; 定时任务和cron表达式相关链接参考链接在线cron表达式生成器cron表达式详解]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[chrome 上传下载时卡死问题]]></title>
    <url>%2F2018%2F08%2F23%2Fchrome-%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%97%B6%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[原因和解决办法1搜狗输入法与chrome冲突，搜狗卸载重新安装就好了。 近期遇到这种问题，将chrome重新安装了好多次都没用。装成低版本的chrome时就好了，但是因为版本太低，好多插件不起效，用起来还是蛋疼。然后在网上找原因时，看到有说可能与搜狗有关系，卸载搜狗后，chrome恢复正常， 重新安装成新版本的搜狗后，问题解决 参考地址:http://tieba.baidu.com/p/5782771456]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 日期操作函数]]></title>
    <url>%2F2018%2F08%2F22%2Fmysql-%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[DATE_ADD()：日期增加函数DATE_SUB()：日期减少函数 示例添加15分钟到日期并返回日期：1SELECT DATE_ADD("2018-08-22 09:34:21", INTERVAL 15 MINUTE); 从日期减去10天并返回日期：1SELECT DATE_SUB("2018-08-22", INTERVAL 10 DAY); 定义和用法123456_定义：_DATE_ADD（）函数在添加特定时间/日期间隔后返回日期。DATE_SUB（）函数在减去某个时间/日期间隔后返回一个日期。__用法：__DATE_ADD(date, INTERVAL value unit)DATE_SUB(date, INTERVAL value unit) 参数值 参数 说明 date 必填，原日期 value 必填，增加/减去日期的值 unit 必填，单位类型 unit值 参数 说明 MICROSECOND 微秒 SECOND 秒 MINUTE 分钟 HOUR 小时 DAY 天 WEEK 周 MONTH 月 QUARTER 季度 YEAR 年 SECOND_MICROSECOND 秒.微秒 MINUTE_MICROSECOND 分钟.微秒 MINUTE_SECOND 分钟.秒 HOUR_MICROSECOND 小时.微秒 HOUR_SECOND 小时.秒 HOUR_MINUTE 小时.分 DAY_MICROSECOND 天.微秒 DAY_SECOND 天.秒 DAY_MINUTE 天.分 DAY_HOUR 天.时 YEAR_MONTH 年.月 参考地址DATE_ADD()参考地址1: https://www.w3schools.com/sql/func_mysql_date_add.aspDATE_SUB()参考地址2: https://www.w3schools.com/sql/func_mysql_date_sub.asp DATE_FORMAT() 函数DATE_FORMAT():不同的格式显示日期/时间数据 示例执行以下脚本1234select DATE_FORMAT(NOW(),'%b %d %Y %h:%i %p'); select DATE_FORMAT(NOW(),'%Y-%m-%d');select DATE_FORMAT(NOW(),'%d %b %y');select DATE_FORMAT(NOW(),'%d %b %Y %T:%f'); 结果1234567891011Aug 28 2018 12:53 AM2018-08-2828 Aug 1828 Aug 2018 12:53:40:000000``` ### 定义和用法``` bash_定义：_DATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。__用法：__DATE_FORMAT(date,format) 参数值date 参数是合法的日期。format 规定日期/时间的输出格式。 format 可用格式 格式 描述 %a 缩写星期名 %b 缩写月名 %c 月，数值 %D 带有英文前缀的月中的天 %d 月的天，数值(00-31) %e 月的天，数值(0-31) %f 微秒 %H 小时 (00-23) %h 小时 (01-12) %I 小时 (01-12) %i 分钟，数值(00-59) %j 年的天 (001-366) %k 小时 (0-23) %l 小时 (1-12) %M 月名 %m 月，数值(00-12) %p AM 或 PM %r 时间，12-小时（hh:mm:ss AM 或 PM） %S 秒(00-59) %s 秒(00-59) %T 时间, 24-小时 (hh:mm:ss) %U 周 (00-53) 星期日是一周的第一天 %u 周 (00-53) 星期一是一周的第一天 %V 周 (01-53) 星期日是一周的第一天，与 %X 使用 %v 周 (01-53) 星期一是一周的第一天，与 %x 使用 %W 星期名 %w 周的天 （0=星期日, 6=星期六） %X 年，其中的星期日是周的第一天，4 位，与 %V 使用 %x 年，其中的星期一是周的第一天，4 位，与 %v 使用 %Y 年，4 位 %y 年，2 位 参考地址DATE_FORMAT()参考地址1: http://www.w3school.com.cn/sql/func_date_format.asp]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[订单支付遇到的问题]]></title>
    <url>%2F2018%2F08%2F22%2F%E6%94%AF%E4%BB%98%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述前提：是这样的，一笔订单下单之后，如果不支付，会处于待支付状态。而一般这个订单会有类似 30 分钟不支付自动取消订单的功能。 实现：这种功能的实现，可以通过定时任务，每隔 30 秒或一分钟扫描一次。但如果集群环境下，可能定时任务会执行重复。当然我们可以通过类似操作系统 PV 操作限制同一时段只能一个定时任务执行。 目标：这种情况，除了定时任务，还有没有其他好点的实现？ 解决办法1.记录下单时间 。在用户访问订单的时候用超时时间和下单时间比较，如果超时就取消订单，用户主动触发。在加上定时任务，扫描表，过期订单改为取消状态。优点：方法简单高效缺点：用户自己触发的这种并不能即使恢复库存.2.利用redis。将订单存入redis中，给订单设置过期时间（expire ）。支付时，去redis查询订单，不存在的话讲订单设置为已取消。 3.延时队列。 可以 rabbitmq 实现的。AB 两个队列，A 队列设置消息过期时间，A 队列没有消费者，A 队列过期后自动转发到 B 队列，B 队列消费者进行取消队列。（此处是别人给的方案，对消息队列熟悉，等有时间研究）]]></content>
      <categories>
        <category>业务</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建]]></title>
    <url>%2F2018%2F08%2F22%2Fhexo%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[这是一篇用于记录hexo搭建的日志,用于记录遇到的所有问题: 搭建 hexo搭建：https://zhuanlan.zhihu.com/p/25729240 标签和分类 tags和categories用法：https://github.com/hexojs/hexo/issues/320 增加搜索功能 增加搜索功能：http://www.itfanr.cc/2017/10/27/add-search-function-to-hexo-blog/ 增加本站访问统计次数使用了不蒜子 插件:http://ibruce.info/2015/04/04/busuanzi/ 修改hemes/你的主题/layout/_partial/footer.ejs文件123456789101112131415161718192021&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;&lt;div class="copyright" &gt; &#123;% set current = date(Date.now(), "YYYY") %&#125; &amp;copy; &#123;% if theme.since and theme.since != current %&#125; &#123;&#123; theme.since &#125;&#125; - &#123;% endif %&#125; &lt;span itemprop="copyrightYear"&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt; &lt;span class="with-love"&gt; &lt;i class="fa fa-&#123;&#123; theme.authoricon &#125;&#125;"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="author" itemprop="copyrightHolder"&gt;&#123;&#123; config.author &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;div class="powered-by"&gt;&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;&lt;span id="busuanzi_container_site_uv"&gt; 本站访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人次&lt;/span&gt;&lt;/div&gt;&lt;div class="theme-info"&gt;&lt;span id="busuanzi_container_site_pv"&gt; 本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次&lt;/span&gt;&lt;/div&gt; 我这里去掉了 “由 Hexo 强力驱动 | 主题 - NexT.Gemini“字样 hexo 部署后，绑定域名清空的问题 hexo 部署后 git项目的 Custom domain清空：在source文件夹下面建个CNAME文件夹，里面写上自己的域名，同样的，favicon.ico也可以在里面设置。 参考： https://www.zhihu.com/question/28814437]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
